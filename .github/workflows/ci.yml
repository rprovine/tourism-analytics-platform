name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tourism_analytics_test
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        API_V1_STR=/api/v1
        PROJECT_NAME=Tourism Analytics Platform Test
        DEBUG=true
        DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/tourism_analytics_test
        REDIS_URL=redis://localhost:6379/0
        SECRET_KEY=test-secret-key-for-ci
        SENTIMENT_MODEL_PATH=models/sentiment
        FORECASTING_MODEL_PATH=models/forecasting
        UPLOAD_DIR=uploads
        MAX_FILE_SIZE=10485760
        EOF
    
    - name: Run database migrations
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/tourism_analytics_test
    
    - name: Run health check tests
      run: |
        python -c "
        import asyncio
        import httpx
        import subprocess
        import time
        import os
        
        # Start the app in background
        proc = subprocess.Popen(['uvicorn', 'main:app', '--host', '0.0.0.0', '--port', '8000'])
        time.sleep(10)  # Wait for startup
        
        async def test_health():
            async with httpx.AsyncClient() as client:
                response = await client.get('http://localhost:8000/api/v1/health/')
                assert response.status_code == 200
                data = response.json()
                assert data['status'] == 'healthy'
                print('âœ… Health check passed')
        
        try:
            asyncio.run(test_health())
        finally:
            proc.terminate()
            proc.wait()
        "
    
    - name: Run API endpoint tests
      run: |
        python -c "
        import asyncio
        import httpx
        import subprocess
        import time
        
        # Start the app in background
        proc = subprocess.Popen(['uvicorn', 'main:app', '--host', '0.0.0.0', '--port', '8000'])
        time.sleep(10)  # Wait for startup
        
        async def test_api_endpoints():
            async with httpx.AsyncClient() as client:
                # Test review creation
                review_data = {
                    'business_id': 'test_hotel',
                    'reviewer_name': 'Test User',
                    'rating': 4.5,
                    'review_text': 'Great test hotel!',
                    'language': 'en'
                }
                response = await client.post('http://localhost:8000/api/v1/reviews/', json=review_data)
                assert response.status_code == 200
                print('âœ… Review creation test passed')
                
                # Test review retrieval
                response = await client.get('http://localhost:8000/api/v1/reviews/?business_id=test_hotel&limit=1')
                assert response.status_code == 200
                print('âœ… Review retrieval test passed')
        
        try:
            asyncio.run(test_api_endpoints())
        finally:
            proc.terminate()
            proc.wait()
        "

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run Black formatting check
      run: black --check --diff .
      continue-on-error: true
    
    - name: Run isort import sorting check
      run: isort --check-only --diff .
      continue-on-error: true
    
    - name: Run flake8 linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety dependency check
      run: safety check --json --output safety-report.json
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t tourism-analytics:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-app -p 8000:8000 tourism-analytics:latest
        sleep 30
        curl -f http://localhost:8000/api/v1/health/ || exit 1
        docker stop test-app
    
    - name: Docker image info
      run: |
        docker images tourism-analytics:latest
        echo "âœ… Docker build successful"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, lint, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment"
        echo "This would deploy to your staging server"
        # Add your deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, lint, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment"
        echo "This would deploy to your production server"
        # Add your deployment commands here